whitespace means right space

"""multi-line comments"""
""" It is the
first time I learn it
"""
1/21
2/21

## create a variable called c and set it to "a"
c = "cats"[1]

# 4 string methods
len()
lower()
upper()
str()
"Ryan".lower()
# methods that use dot notation only work with strings
# len(), str() can work on other data types

# convert the non-string into a string
str(2)

# combine a string with variables
name = "Joey"
print "Hello %s" % (name)

1/7
now = datetime.now()
now.year/month/day/hour/minute/second

4/21
1st: not
2nd: and
3rd: or

5/21
isalpha()/ .isalpha()
.lower() function does not modify the string itself, it simply returns a lowercase-version

2/7
After defining a function, it must be called to be implemented. In the previous exercise, spam() in the last line told the program to look for the function called spam and execute the code inside it.

import math
print math.sqrt(25)

from math import sqrt

from math import *

dir(math)

1/3
8/21
You can access an individual item on the list by its index. 
slice[4:5] is actually slice[4]

# search for an item in a list
animals.index("bat")

# insert items
animals.insert(1, "dog")

If you want to do something with every item in the list, you can use a for loop

.sort() modifies the list rather than returning a new list.

A dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are enclosed in curly braces

An empty pair of curly braces {} is an empty dictionary, just like an empty pair of [] is an empty list.

The length len() of a dictionary is the number of key-value pairs it has. Each pair counts only once, even if the value is a list. 
# adding new key-value pair
dic_name['key'] = value
del dict_name['key']
dict_name.remove("")
dict_name['list'].sort()
dict_name['list'].remove('')
dict_name['list'] += item

3/7
for loop: ordered list, unordered dict
for key in d:
	print d[key]

prices and stock dictionary have the same keys, you can access the stock dictionary while you are looping through prices.
for key in prices:
    print key
    print "prices: %s" % prices[key]
    print "stock: %s" % stock[key]
    
10/21
11/21
# remove item from list n
n.pop(index)
n.remove(item)
del(n[1])

using a list as an argument in a function is essentially the same as using just a number or string

# stop excluded
range(stop)
range(start, stop)
range(start, stop, step)

Method 1 is useful to loop through the list, but it's not possible to modify the list this way. Method 2 uses indexes to loop through the list, making it possible to also modify the list if needed
M1
for item in list:
	print item
for i in range(len(list)):
	print list[i]
	
4/7
# 5*5 grid
board = []
for i in range(5):
    board.append(['O']*5)
def print_board(board):
    for row in board:
        print " ".join(row)
print_board(board)

int()

The \ character just continues the if statement onto the next line.
random.randint(a,b) returns a<= n <=b

13/21
The , character after our print statement means that our next print statement keeps printing on the same line.

enumerate()

zip()
zip will create pairs of elements when passed two lists, and will stop at the end of the shorter list.
can handle multiple lists

2/3

for letter in “Eric”:
	print letter,
# comma leads to a space
# E r i c

Python file objects have a closed attribute which is True when the file is closed and False otherwise.